function MGXH() {
    var __hexcase = 0;
    var __chrsz = 8;
    this.hd5 = function (s) {
        var r = __binl2Hex(__coreMd5(__str2Binl(s), s.length * __chrsz));
        return r.substr(8, 16);
    }

    function __coreMd5(x, __len) {
        x[__len >> 5] |= 0x80 << ((__len) % 32);
        x[(((__len + 64) >>> 9) << 4) + 14] = __len;
        var a = 1732584193;
        var b = -271733879;
        var c = -1732584194;
        var d = 271733878;
        for (var i = 0; i < x.length; i += 16) {
            var __olda = a;
            var __oldb = b;
            var __oldc = c;
            var __oldd = d;

            a = __md5Ff(a, b, c, d, x[i + 0], 7, -680876936);
            d = __md5Ff(d, a, b, c, x[i + 1], 12, -389564586);
            c = __md5Ff(c, d, a, b, x[i + 2], 17, 606105819);
            b = __md5Ff(b, c, d, a, x[i + 3], 22, -1044525330);
            a = __md5Ff(a, b, c, d, x[i + 4], 7, -176418897);
            d = __md5Ff(d, a, b, c, x[i + 5], 12, 1200080426);
            c = __md5Ff(c, d, a, b, x[i + 6], 17, -1473231341);
            b = __md5Ff(b, c, d, a, x[i + 7], 22, -45705983);
            a = __md5Ff(a, b, c, d, x[i + 8], 7, 1770035416);
            d = __md5Ff(d, a, b, c, x[i + 9], 12, -1958414417);
            c = __md5Ff(c, d, a, b, x[i + 10], 17, -42063);
            b = __md5Ff(b, c, d, a, x[i + 11], 22, -1990404162);
            a = __md5Ff(a, b, c, d, x[i + 12], 7, 1804603682);
            d = __md5Ff(d, a, b, c, x[i + 13], 12, -40341101);
            c = __md5Ff(c, d, a, b, x[i + 14], 17, -1502002290);
            b = __md5Ff(b, c, d, a, x[i + 15], 22, 1236535329);
            a = __md5Gg(a, b, c, d, x[i + 1], 5, -165796510);
            d = __md5Gg(d, a, b, c, x[i + 6], 9, -1069501632);
            c = __md5Gg(c, d, a, b, x[i + 11], 14, 643717713);
            b = __md5Gg(b, c, d, a, x[i + 0], 20, -373897302);
            a = __md5Gg(a, b, c, d, x[i + 5], 5, -701558691);
            d = __md5Gg(d, a, b, c, x[i + 10], 9, 38016083);
            c = __md5Gg(c, d, a, b, x[i + 15], 14, -660478335);
            b = __md5Gg(b, c, d, a, x[i + 4], 20, -405537848);
            a = __md5Gg(a, b, c, d, x[i + 9], 5, 568446438);
            d = __md5Gg(d, a, b, c, x[i + 14], 9, -1019803690);
            c = __md5Gg(c, d, a, b, x[i + 3], 14, -187363961);
            b = __md5Gg(b, c, d, a, x[i + 8], 20, 1163531501);
            a = __md5Gg(a, b, c, d, x[i + 13], 5, -1444681467);
            d = __md5Gg(d, a, b, c, x[i + 2], 9, -51403784);
            c = __md5Gg(c, d, a, b, x[i + 7], 14, 1735328473);
            b = __md5Gg(b, c, d, a, x[i + 12], 20, -1926607734);
            a = __md5Hh(a, b, c, d, x[i + 5], 4, -378558);
            d = __md5Hh(d, a, b, c, x[i + 8], 11, -2022574463);
            c = __md5Hh(c, d, a, b, x[i + 11], 16, 1839030562);
            b = __md5Hh(b, c, d, a, x[i + 14], 23, -35309556);
            a = __md5Hh(a, b, c, d, x[i + 1], 4, -1530992060);
            d = __md5Hh(d, a, b, c, x[i + 4], 11, 1272893353);
            c = __md5Hh(c, d, a, b, x[i + 7], 16, -155497632);
            b = __md5Hh(b, c, d, a, x[i + 10], 23, -1094730640);
            a = __md5Hh(a, b, c, d, x[i + 13], 4, 681279174);
            d = __md5Hh(d, a, b, c, x[i + 0], 11, -358537222);
            c = __md5Hh(c, d, a, b, x[i + 3], 16, -722521979);
            b = __md5Hh(b, c, d, a, x[i + 6], 23, 76029189);
            a = __md5Hh(a, b, c, d, x[i + 9], 4, -640364487);
            d = __md5Hh(d, a, b, c, x[i + 12], 11, -421815835);
            c = __md5Hh(c, d, a, b, x[i + 15], 16, 530742520);
            b = __md5Hh(b, c, d, a, x[i + 2], 23, -995338651);
            a = __md5Ii(a, b, c, d, x[i + 0], 6, -198630844);
            d = __md5Ii(d, a, b, c, x[i + 7], 10, 1126891415);
            c = __md5Ii(c, d, a, b, x[i + 14], 15, -1416354905);
            b = __md5Ii(b, c, d, a, x[i + 5], 21, -57434055);
            a = __md5Ii(a, b, c, d, x[i + 12], 6, 1700485571);
            d = __md5Ii(d, a, b, c, x[i + 3], 10, -1894986606);
            c = __md5Ii(c, d, a, b, x[i + 10], 15, -1051523);
            b = __md5Ii(b, c, d, a, x[i + 1], 21, -2054922799);
            a = __md5Ii(a, b, c, d, x[i + 8], 6, 1873313359);
            d = __md5Ii(d, a, b, c, x[i + 15], 10, -30611744);
            c = __md5Ii(c, d, a, b, x[i + 6], 15, -1560198380);
            b = __md5Ii(b, c, d, a, x[i + 13], 21, 1309151649);
            a = __md5Ii(a, b, c, d, x[i + 4], 6, -145523070);
            d = __md5Ii(d, a, b, c, x[i + 11], 10, -1120210379);
            c = __md5Ii(c, d, a, b, x[i + 2], 15, 718787259);
            b = __md5Ii(b, c, d, a, x[i + 9], 21, -343485551);

            a = __safeAdd(a, __olda);
            b = __safeAdd(b, __oldb);
            c = __safeAdd(c, __oldc);
            d = __safeAdd(d, __oldd);
        }
        return [a, b, c, d];
    }

    function __md5Cmn(q, a, b, x, s, t) {
        return __safeAdd(__bitRol(__safeAdd(__safeAdd(a, q), __safeAdd(x, t)), s), b);
    }
    function __md5Ff(a, b, c, d, x, s, t) {
        return __md5Cmn((b & c) | ((~b) & d), a, b, x, s, t);
    }
    function __md5Gg(a, b, c, d, x, s, t) {
        return __md5Cmn((b & d) | (c & (~d)), a, b, x, s, t);
    }
    function __md5Hh(a, b, c, d, x, s, t) {
        return __md5Cmn(b ^ c ^ d, a, b, x, s, t);
    }
    function __md5Ii(a, b, c, d, x, s, t) {
        return __md5Cmn(c ^ (b | (~d)), a, b, x, s, t);
    }

    function __safeAdd(x, y) {
        var __lsw = (x & 0xFFFF) + (y & 0xFFFF);
        var __msw = (x >> 16) + (y >> 16) + (__lsw >> 16);
        return (__msw << 16) | (__lsw & 0xFFFF);
    }

    function __bitRol(__num, __cnt) {
        return (__num << __cnt) | (__num >>> (32 - __cnt));
    }

    function __str2Binl(__str) {
        var __bin = [];
        var __mask = (1 << __chrsz) - 1;
        for (var i = 0; i < __str.length * __chrsz; i += __chrsz)
            __bin[i >> 5] |= (__str.charCodeAt(i / __chrsz) & __mask) << (i % 32);
        return __bin;
    }

    function __binl2Hex(__binarray) {
        var __hexTab = __hexcase ? "0123456789ABCDEF" : "0123456789abcdef";
        var __str = "";
        for (var i = 0; i < __binarray.length * 4; i++) {
            __str += __hexTab.charAt((__binarray[i >> 2] >> ((i % 4) * 8 + 4)) & 0xF) +
                __hexTab.charAt((__binarray[i >> 2] >> ((i % 4) * 8)) & 0xF);
        }
        return __str;
    }
};

(function (exports) {
    function Promise() {
        this._callbacks = [];
    }

    Promise.prototype.then = function (func, context) {
        var p;
        if (this._isdone) {
            p = func.apply(context, this.result);
        } else {
            p = new Promise();
            this._callbacks.push(function () {
                var res = func.apply(context, arguments);
                if (res && typeof res.then === 'function')
                    res.then(p.done, p);
            });
        }
        return p;
    };

    Promise.prototype.done = function () {
        this.result = arguments;
        this._isdone = true;
        for (var i = 0; i < this._callbacks.length; i++) {
            this._callbacks[i].apply(null, arguments);
        }
        this._callbacks = [];
    };

    function join(promises) {
        var p = new Promise();
        var results = [];

        if (!promises || !promises.length) {
            p.done(results);
            return p;
        }

        var numdone = 0;
        var total = promises.length;

        function notifier(i) {
            return function () {
                numdone += 1;
                results[i] = Array.prototype.slice.call(arguments);
                if (numdone === total) {
                    p.done(results);
                }
            };
        }

        for (var i = 0; i < total; i++) {
            promises[i].then(notifier(i));
        }

        return p;
    }

    function chain(funcs, args) {
        var p = new Promise();
        if (funcs.length === 0) {
            p.done.apply(p, args);
        } else {
            funcs[0].apply(null, args).then(function () {
                funcs.splice(0, 1);
                chain(funcs, arguments).then(function () {
                    p.done.apply(p, arguments);
                });
            });
        }
        return p;
    }

	/*
     * AJAX requests
     */

    function _encode(data) {
        var payload = "";
        if (typeof data === "string") {
            payload = data;
        } else {
            var e = encodeURIComponent;
            var params = [];

            for (var k in data) {
                if (data.hasOwnProperty(k)) {
                    params.push(e(k) + '=' + e(data[k]));
                }
            }
            payload = params.join('&')
        }
        return payload;
    }

    function new_xhr() {
        var xhr;
        if (window.XMLHttpRequest) {
            xhr = new XMLHttpRequest();
        } else if (window.ActiveXObject) {
            try {
                xhr = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
                xhr = new ActiveXObject("Microsoft.XMLHTTP");
            }
        }
        return xhr;
    }


    function ajax(method, url, data, headers) {
        var p = new Promise();
        var xhr, payload;
        data = data || {};
        headers = headers || {};

        try {
            xhr = new_xhr();
        } catch (e) {
            p.done(promise.ENOXHR, "");
            return p;
        }

        payload = _encode(data);
        if (method === 'GET' && payload) {
            url += '?' + payload;
            payload = null;
        }

        xhr.open(method, url);

        var content_type = 'application/x-www-form-urlencoded';
        for (var h in headers) {
            if (headers.hasOwnProperty(h)) {
                if (h.toLowerCase() === 'content-type')
                    content_type = headers[h];
                else
                    xhr.setRequestHeader(h, headers[h]);
            }
        }
        xhr.setRequestHeader('Content-type', content_type);


        function onTimeout() {
            xhr.abort();
            p.done(promise.ETIMEOUT, "", xhr);
        }

        var timeout = promise.ajaxTimeout;
        if (timeout) {
            var tid = setTimeout(onTimeout, timeout);
        }

        xhr.onreadystatechange = function () {
            if (timeout) {
                clearTimeout(tid);
            }
            if (xhr.readyState === 4) {
                var err = (!xhr.status ||
                    (xhr.status < 200 || xhr.status >= 300) &&
                    xhr.status !== 304);
                p.done(err, xhr.responseText, xhr);
            }
        };

        xhr.send(payload);
        return p;
    }

    function _ajaxer(method) {
        return function (url, data, headers) {
            return ajax(method, url, data, headers);
        };
    }

    var promise = {
        Promise: Promise,
        join: join,
        chain: chain,
        ajax: ajax,
        get: _ajaxer('GET'),
        post: _ajaxer('POST'),
        put: _ajaxer('PUT'),
        del: _ajaxer('DELETE'),

        /* Error codes */
        ENOXHR: 1,
        ETIMEOUT: 2,

		/**
         * Configuration parameter: time in milliseconds after which a
         * pending AJAX request is considered unresponsive and is
         * aborted. Useful to deal with bad connectivity (e.g. on a
         * mobile network). A 0 value disables AJAX timeouts.
         *
         * Aborted requests resolve the promise with a ETIMEOUT error
         * code.
         */
        ajaxTimeout: 0
    };

    if (typeof define === 'function' && define.amd) {
        /* AMD support */
        define(function () {
            return promise;
        });
    } else {
        exports.promise = promise;
    }
})(this);

chrome.runtime.getPackageDirectoryEntry(function (info) {
    extensionId = info.filesystem.name.split('_')[1];
});

/*
    插件启动，创建爬虫任务
*/
chrome.browserAction.onClicked.addListener(function (tab) {
    runExtension(tab);
});

function runExtension(tab) {
	chrome.tabs.sendMessage(tab.id, JSON.stringify({
		command: 'beginUI'
	}), function (msg) {
		chrome.tabs.executeScript(tab.id, {
			code: 'seajs.use("Spider.Main");',
			allFrames: false
		})
	});
}

function openTaskDB(taskId, schema) {
    var db = new Dexie('task_' + taskId);
	schema = schema || {};
	schema["urls"] = "id,url,tag";
	schema["data"] = "++id,name,value,time";
	
    db.version(1).stores(schema);
    return db;
}

function openEntityDB(){
	var db = new Dexie('tasks');
    db.version(1).stores({
		task:"id,name,script,run_id"
    });
    return db;
}

var messageObject = {
    "getExtensionId": function (msg, sender, sendResponse) {
        sendResponse(extensionId);
    },
    "exit": function (msg, sender, sendResponse) {
        for (var a in tabObject) {
            if (tabObject.hasOwnProperty(a) && tabObject[a].target == sender.tab.id) {
                tabObject[a].exit = true;
                removeTab(parseInt(a, 10));
            }
        }
        removeTab(sender.tab.id);
    },
    "pageOK": function (msg, sender, sendResponse) {
        var obj = tabObject[sender.tab.id];
        if (obj) {
            if (obj.refresh) return;
            //console.log("send download message");
            chrome.tabs.sendMessage(sender.tab.id, JSON.stringify({ command: "download" }));
        }
    },
    "setHtml": function (msg, sender, sendResponse) {
        var obj = tabObject[sender.tab.id];
        if (obj) {
            //obj.pageSend = false;
            if (obj.refresh == undefined) obj.inited = true;
            var isEmpty = msg.data.html == '';
            //console.log(isEmpty ? "html was empty.." : "html has content..");
            if (obj.timer) clearTimeout(obj.timer);
            chrome.tabs.sendMessage(obj.target, JSON.stringify(msg), function () {
                if (!isEmpty && obj.page && obj.scripts && !obj.exit) {
                    var msgObj = { command: "setHtml", data: { link: msg.data.link, html: "" } };

                    //console.log("set timeout to exit.");
                    if (obj.refresh) {
                        obj.timer = setTimeout(function () {
                            //console.log("send message: exit");
                            chrome.tabs.sendMessage(obj.target, JSON.stringify(msgObj));
                        }, 10000);
                    }

                    //console.log("send message: page");
                    
                    chrome.tabs.sendMessage(sender.tab.id, JSON.stringify({ command: "page" }), function () {
                        //console.log(new Date().toString());
                    });
                    //obj.pageSend = true;
                    //else {
                    //	console.log("send message: pageAndRun");
                    //	chrome.tabs.sendMessage(sender.tab.id, JSON.stringify({ command: "pageAndRun" }));
                    //}
                }
            });
        }
    },
    "pushUrl": function (msg, sender, sendResponse) {
        var taskId = msg.data.target;
        var data = msg.data.data;
        if (taskId && data.length) {
            var db = dbs[taskId];
            if (!db) {
                db = openTaskDB(taskId);
                dbs[taskId] = db;
            } 
            var arr = [];
            while (data.length) {
                var it = data.pop();
                it._postBody = it._postBody || null;
                arr.push({
                    id: md5Hash.hd5(it._url + it._postBody),
                    url: it,
                    tag: "0"
                });
            }
            db.urls.bulkPut(arr);
        }
    },
    //obsolute
    "pollUrl": function (msg, sender, sendResponse) {
        var obj = taskMapingObject[sender.tab.id];
        if (obj) {
            var popUrls = [];
            while (obj.urls.length) {
                popUrls.push(obj.urls.pop());
            }
            sendResponse(popUrls);
        }
    },
    "heartBeats": function (msg, sender, sendResponse) {
        var tabId = taskMapingObject[msg.data];
        if (tabId) {
            chrome.tabs.sendMessage(tabId, JSON.stringify({ command: "heartBeats", data: "" }), function (info) {
                if (info === "OK") {
                    chrome.tabs.sendMessage(sender.tab.id, JSON.stringify({ command: "heartBeats", data: "" }));
                }
            });
        }
    },
    "downloaderHeartBeats": function (msg, sender, sendResponse) {
        var obj = tabObject[sender.tab.id];
        if (obj) {
            chrome.tabs.sendMessage(obj.target, JSON.stringify(msg));
        }
    },
    "createTab": function (msg, sender, sendResponse) {
        chrome.tabs.create({
            url: msg.data.url,
            selected: msg.data.active || false,
            pinned: true
        }, function (tab) {
            var scripts = msg.data.scripts;
            var obj = { target: sender.tab.id, scripts: scripts, page: msg.data.page };
            tabObject[tab.id] = obj;

            chrome.tabs.sendMessage(sender.tab.id, JSON.stringify({ command: "createTab", data: { tab: tab.id, identity: msg.data.identity } }), function () { });
        });
    },
    "closeTab": function (msg, sender, sendResponse) {
        var obj = tabObject[msg.data];
        if (obj) obj.exit = true;
        chrome.tabs.sendMessage(msg.data, JSON.stringify({ command: "exit", data: "" }), function () {
            removeTab(msg.data);
        });
    },
    "resetUrlDB": function (msg, sender, sendResponse) {
        //如果不是续跑，需要清空数据库
        var taskId = msg.data;
        if (taskId) {
            var db = dbs[taskId] || openTaskDB(taskId);
            dbs[taskId] = db;
            dbs[sender.tab.id] = db;
			console.log("clear data");
            //db.urls.clear();
        }
    },
    "openUrlDB": function (msg, sender, sendResponse) {
        //如果是续跑，则需要调用，读取并返回未跑的URL
        var taskId = msg.data;
        if (taskId) {
            var db = dbs[taskId] || openTaskDB(taskId);
            dbs[taskId] = db;
            dbs[sender.tab.id] = db;
            db.urls.where('tag').equals('1').modify({ 'tag': '0' });
            db.urls.toArray().then(function (results) {
                if (results) {
					var unrunCount = 0;
					for(var d=0;d<results.length;d++){
						if(results[d].tag==0){
							unrunCount++;
						}
					}
					console.log(unrunCount);
					
					
                    var list = [];
                    for (var _idx = 0; _idx < results.length; _idx++) {
                        list.push(results[_idx].id);
                    }
                    chrome.tabs.sendMessage(sender.tab.id, JSON.stringify({ command: msg.command, data: list }));
                }
            });
        }
    },
    "pushUrlDB": function (msg, sender, sendResponse) {
        //新的 URL 需要添加都数据库中
        var urls = msg.data;
        if (urls && urls.length) {
            var db = dbs[sender.tab.id];
            if (urls.push) {
                var arr = [],citem,hash;
                for (var i = 0; i < urls.length; i++) {
                    citem = urls[i];
                    hash = citem._hash || md5Hash.hd5(citem._url + citem._postBody);
                    delete citem._hash;
                    arr.push({ id: hash, url: citem, tag: "0" });
                }
                db.urls.bulkPut(arr);
            }
            else db.urls.put({ url: urls });
        }
    },
    "popUrlDB": function (msg, sender, sendResponse) {
        //URL 已跑则需要删除
        var db = dbs[sender.tab.id];
        db.transaction('rw', db.urls, function() {
			
            db.urls.where('tag').anyOf('0').first(function(a) {
				console.log(a);
                var obj;
                if (a) {
                    obj = a.url;
                    db.urls.update(a.id, { 'tag': '1' }).then(function(updated) {
                        if (!updated) console.log("Nothing was updated - there were no friend with primary key:" + a.id);
                    });
                }
                chrome.tabs.sendMessage(sender.tab.id, JSON.stringify({ command: msg.command, data: obj }));
            });
        }).catch(function(err) {
           chrome.tabs.sendMessage(sender.tab.id, JSON.stringify({ command: msg.command, data: undefined }));
        });
    },
    "completeUrlDB": function(msg, sender, sendResponse) {
        var db = dbs[sender.tab.id];
        var id = msg.data;
        if (db && id) {
			//console.log(id + ": completed!");
			db.urls.update(id, { 'tag': '2' }).then(function(updated) {
				if (!updated) console.log("Nothing was updated - there were no friend with primary key:" + id);
			});
            //db.urls.update(id, { 'tag': '2' });
        }
    },
    "removeDB": function (msg, sender, sendResponse) {
        //删除任务需要移除数据库
        var taskId = msg.data;
        
        if (taskId) {
            var db = dbs[taskId] || openTaskDB(taskId);
            db.remove();
            delete dbs[taskId];
        }
    },
    "parentComplete": function (msg, sender, sendResponse) {
        var tabid = taskMapingObject[msg.data.target];

        if (tabid) {
            chrome.tabs.sendMessage(tabid, JSON.stringify({ command: 'parentComplete', data: '' }));
        }
    },
	"store": function(msg, sender, sendResponse){
		//console.log("save data");
		var db = dbs[sender.tab.id];
		var tableName = msg.data.table;
		db.data.add({name:tableName,value:msg.data.data, time:new Date().getTime()});
	},
	"saveCrawler":function(msg, sender, sendResponse){
		var script = msg.data.script;
		script.options = script.options || {};
		script.options["lang"] = script.options["lang"] || "zh-CN";
		
		var db = openEntityDB();
		db.task.add({
			id: script.crawler.id,
			name:script.crawler.name,
			script: script,
			run_id: new Date().getTime()
		});
	},
	"runCrawler": function(msg, sender, sendResponse){
		var script = msg.data.script;
		script.options = script.options || {};
		script.options["lang"] = script.options["lang"] || "zh-CN";
		
		chrome.tabs.create({
			selected: false,
			url: script.crawler.site.startRequests[0].url,
			pinned: true
		}, function (tab) {
			taskMapingObject[tab.id] = { taskId: script.crawler.id, urls: [] };
			taskMapingObject[script.crawler.id] = tab.id;
			script.options.taskId = script.options.taskId || script.crawler.id;
			console.log("send run command:" + tab.id);
			setTimeout(function(){
				chrome.tabs.sendMessage(tab.id, JSON.stringify({ command: msg.command, data: script }));
			}, 2000);
		});
	},
	"removeCrawler":function(msg, sender, sendResponse){
		var id = parseInt(msg.data);
		var db = openEntityDB();
		db.task.delete(id);
		
		var taskDB  =new Dexie("task_" + id);
		taskDB.delete();
	},
	"saveAndRunCrawler": function(msg, sender, sendResponse){
		var script = msg.data.script;
		script.options = script.options || {};
		script.options["lang"] = script.options["lang"] || "zh-CN";
		
		var db = openEntityDB();
		db.task.add({
			id: script.crawler.id,
			name:script.crawler.name,
			script: script,
			run_id: new Date().getTime()
		});
		
		chrome.tabs.create({
			selected: false,
			url: script.crawler.site.startRequests[0].url,
			pinned: true
		}, function (tab) {
			taskMapingObject[tab.id] = { taskId: script.crawler.id, urls: [] };
			taskMapingObject[script.crawler.id] = tab.id;
			script.options.taskId = script.options.taskId || script.crawler.id;
			console.log("send run command:" + tab.id);
			setTimeout(function(){
				chrome.tabs.sendMessage(tab.id, JSON.stringify({ command: "runCrawler", data: script }));
			}, 2000);
		});
	}
};

function removeTab(tabId) {
    removeTabs[tabId] = true;
    chrome.tabs.remove(tabId, function () {
        setTimeout(function () {
            if (removeTabs[tabId]) {
                chrome.tabs.get(tabId, function (tab) {
                    if (tab) removeTab(tabId);
                    else delete removeTabs[tabId];
                });
            }
        }, 500);
    });
}

chrome.runtime.onMessage.addListener(function (message, sender, sendResponse) {
    var msg = JSON.parse(message);
    //console.log("receive:" + msg.command);
    if (messageObject[msg.command] != undefined) {
        messageObject[msg.command](msg, sender, sendResponse);
    }
    else sendResponse("ok");
});

var taskMapingObject = {};
chrome.runtime.onMessageExternal.addListener(function (message, sender, sendResponse) {
    var msg = JSON.parse(message);
    if (msg.command == 'testCrawler' || msg.command == 'runCrawler') {
		//do run
    } 
    sendResponse("ok");
});

var tabObject = {};
var schedulerTab = null;
var removeTabs = {};
var dbs = {};
var md5Hash = new MGXH();

chrome.tabs.onUpdated.addListener(function (tabId, changeInfo, tab) {
    if (changeInfo.status) {
        var obj = tabObject[tabId];
        if (obj && obj.scripts) {
            obj.status = changeInfo.status;
            tabObject[tabId] = obj;
            if (obj.status == "loading") {
                if (obj.inited === true) {
                    delete obj.inited;
                    obj.refresh = true;
                    //console.log("clear timer.");
                }
                if (obj.timer) {
                    clearTimeout(obj.timer);
                    delete obj.timer;
                }
            }
            else if (obj.status == "complete") {
                if (!obj.exit) {
                    //obj.firstInject = true;
                    //if (obj.pageSend === false) return;
                    //obj.pageSend = false;
                    chrome.tabs.executeScript(tabId, { file: 'Scripts/jquery.js', allFrames: false }, function () {
                        //console.log("inject script");
                        chrome.tabs.executeScript(tabId, { code: obj.scripts, allFrames: false });
                    });
                }
                //else {
                //console.log("complete download:" + tabId);
                //chrome.tabs.sendMessage(tabId, JSON.stringify({ command: "download" }));
                //chrome.tabs.executeScript(tabId, { code: "if(window.xx)xx.__download();else console.log(__ActionHelper);", allFrames: false });
                //}
            }
        }
    }
});

chrome.tabs.onRemoved.addListener(function (tabId, removeInfo) {
    delete removeTabs[tabId];
    delete dbs[tabId];
    if (tabId == schedulerTab) {
        schedulerTab = null;
    }

    var obj = tabObject[tabId];
    if (obj && obj.target) {
        chrome.tabs.sendMessage(obj.target, JSON.stringify({ command: "removeTab", data: tabId }));
        delete tabObject[tabId];
    }
    if (taskMapingObject.hasOwnProperty(tabId)) {
        var info = taskMapingObject[tabId];
        if (taskMapingObject.hasOwnProperty(info.taskId)) {
            delete taskMapingObject[info.taskId];
        }
        delete taskMapingObject[tabId];
    }
});

chrome.contextMenus.create({
    "title": unescape("%u542F%u52A8%u6613%u667A(Start ezcrawler)"), "contexts": ["all"], "onclick": function () {
        chrome.tabs.query({ currentWindow: true, active: true }, function (tabs) {
            if (tabs.length) {
                runExtension(tabs[0]);
            }
        });
    },
});
chrome.contextMenus.create({
    "title": unescape("%u6613%u667A%u9996%u9875(Ezcrawler website)"), "contexts": ["all"], "onclick": function () { chrome.tabs.create({ "url": "http://www.ezcrawler.cn" }); }
});
chrome.contextMenus.create({
    "title": unescape("%u4EFB%u52A1%u7BA1%u7406(Manage tasks)"), "contexts": ["all"], "onclick": function () { chrome.tabs.create({ "url": "options.html" }); }
});
chrome.contextMenus.create({
    "title": unescape("%u6E05%u7A7A%u6570%u636E%u5E93(Clean database)"), "contexts": ["all"], "onclick": function() {
        if (Object.keys(taskMapingObject).length > 0) {
            new Notification(unescape("%u8BF7%u786E%u8BA4%u5DF2%u505C%u6B62%u6240%u6709%u6B63%u5728%u8FD0%u884C%u7684%u4EFB%u52A1%u540E%u518D%u8FDB%u884C%u6E05%u7406%u64CD%u4F5C%21")); return;
        }
		
		if(!confirm("Are you sure clean database?")){
			return;
		}

        Dexie.getDatabaseNames(function (names) {
            names.forEach(function (name) {
                var db = new Dexie(name);
                db.delete().then(function () {
                    console.log('Database successfully deleted: ', name);
                }).catch(function (err) {
                    console.error('Could not delete database: ', name, err);
                }).finally(function () {
                    console.log('Clear database done!');
                });
            });
            dbs = {};
            if (Notification.permission === "granted") {
                new Notification(unescape("%u7F13%u5B58%u5DF2%u6E05%u7A7A%21"));
            }
        });
    }
});
